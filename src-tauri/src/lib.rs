use std::process::Command;

#[tauri::command] // Checks if ffprobe is in the PATH
fn check_ffprobe() -> bool {
    match Command::new("ffprobe").arg("-version").output() {
        Ok(output) => output.status.success(),
        Err(_) => false,
    }
}

fn get_metadata<R: Fn(&str)>(path: &str, log_fn: R) -> Result<Vec<(String, f64, f64)>, Box<dyn Error>> {
    let rushes = glob(&format!("{}/*.mp4", path))?
        .chain(glob(&format!("{}/*.MP4", path))?)        
        .chain(glob(&format!("{}/*.avi", path))?)
        .chain(glob(&format!("{}/*.AVI", path))?)
        .chain(glob(&format!("{}/*.mov", path))?)
        .chain(glob(&format!("{}/*.MOV", path))?)
        .chain(glob(&format!("{}/*.mpg", path))?)
        .chain(glob(&format!("{}/*.MPG", path))?)
        .chain(glob(&format!("{}/*.mxf", path))?)
        .chain(glob(&format!("{}/*.MXF", path))?);

    let mut video_metadata = Vec::new();
    for file in video_files {
        let file_path = match file {
            Ok(path) => path,
            Err(e) => {
                log_fn(&format!("[ERROR] Error accessing file: {}", e));
                continue;
            }
        };

        let file_name = match file_path.file_name() {
            Some(name) => name.to_string_lossy(),
            None => {
                log_fn(&format!("[ERROR] Error accessing filename for {:?}", file_path));
                continue;
            }
        };
        if file_name.starts_with(".") {
            log_fn("[SKIP] Skipping hidden video file as it is likely autogenerated by Linux or MacOS and not a real rush.");
            continue;
        }

        let file_path_str = file_path.to_str().ok_or("Invalid file path")?.to_string();

        let fps_output = Command::new("ffprobe")
            .arg("-v")
            .arg("error")
            .arg("-select_streams")
            .arg("v")
            .arg("-of")
            .arg("default=noprint_wrappers=1:nokey=1")
            .arg("-show_entries")
            .arg("stream=r_frame_rate")
            .arg(&file_path_str)
            .output();

        let fps_string = match fps_output {
            Ok(output) => String::from_utf8_lossy(&output.stdout).trim().to_string(),
            Err(e) => {
                log_fn(&format!("[ERROR] Error getting FPS for {}: {}", &file_path_str, e));
                continue;
            }
        };

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    tauri::Builder::default()
        .plugin(tauri_plugin_shell::init())
        .invoke_handler(tauri::generate_handler![check_ffprobe])
        .run(tauri::generate_context!())
        .expect("Error running ThousandLogs.");
}
